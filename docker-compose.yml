services:
  ceramicraft-merchant-frontend:
    build: fe-mer
    container_name: ceramicraft-merchant-frontend
    restart: unless-stopped
  ceramicraft-customer-frontend:
    build: fe-cus
    container_name: ceramicraft-customer-frontend
    restart: unless-stopped
  nginx:
    image: nginx:1.29-alpine
    container_name: nginx-container
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
    depends_on:
      - ceramicraft-merchant-frontend
      - ceramicraft-customer-frontend
    restart: unless-stopped
  mysql:
    image: mysql:8.0
    container_name: mysql-container
    environment:
      MYSQL_ROOT_PASSWORD: 123456
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql:/docker-entrypoint-initdb.d
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p123456"]
      timeout: 10s
      retries: 10
      interval: 5s
      start_period: 20s
  ceramicraft-user-mservice:
    build: ms-user/server
    container_name: ceramicraft-user-mservice
    env_file:
      - env-file
    depends_on:
      mysql:
        condition: service_healthy
    restart: unless-stopped
  ceramicraft-product-mservice:
    build: ms-cmdt/server
    container_name: ceramicraft-product-mservice
    env_file:
      - env-file
    depends_on:
      mysql:
        condition: service_healthy
    restart: unless-stopped
  ceramicraft-order-mservice:
    build: ms-order/server
    container_name: ceramicraft-order-mservice
    env_file:
      - env-file
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
  ceramicraft-payment-mservice:
    build: ms-pay/server
    container_name: ceramicraft-payment-mservice
    env_file:
      - env-file
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
  ceramicraft-comment-mservice:
    build: ms-comt/server
    container_name: ceramicraft-comment-mservice
    env_file:
      - env-file
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
  kafka:
    image: confluentinc/cp-kafka:8.1.0
    container_name: kafka-container
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-container:9093
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-container:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk
    volumes:
      - kafka_data:/var/lib/kafka/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      timeout: 10s
      retries: 10
      interval: 10s
      start_period: 30s
  mongodb:
    image: mongo:8.0
    container_name: mongo-container
    volumes:
      - mongodb_data:/data/db
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      timeout: 10s
      retries: 5
      interval: 10s
      start_period: 20s
  redis:
    image: redis:8.2-alpine
    container_name: redis-container
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      timeout: 10s
      retries: 5
      interval: 10s
      start_period: 10s

networks:
  default:
    driver: "bridge"

volumes:
  mysql_data:
    driver: local
  kafka_data:
    driver: local
  mongodb_data:
    driver: local
  redis_data:
    driver: local
