name: Update Submodules

on:
  # 手动触发
  workflow_dispatch:
  
  # 定时执行 - 每天上午 9 点 (UTC)
  schedule:
    - cron: '0 9 * * *'
  
  # 当 submodule 仓库有更新时可以通过 webhook 触发
  repository_dispatch:
    types: [submodule-updated]

jobs:
  update-submodules:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        submodules: recursive
        fetch-depth: 0
    
    - name: Setup Git
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
    
    - name: Update submodules to latest
      run: |
        echo "Updating submodules to latest commits..."
        git submodule update --remote --merge
    
    - name: Check for changes
      id: check_changes
      run: |
        if git diff --quiet; then
          echo "No changes detected"
          echo "changes=false" >> $GITHUB_OUTPUT
        else
          echo "Changes detected"
          echo "changes=true" >> $GITHUB_OUTPUT
        fi
    
    - name: Get submodule changes
      if: steps.check_changes.outputs.changes == 'true'
      id: get_changes
      run: |
        echo "Getting submodule change details..."
        changes=$(git status --porcelain | grep -E '^(M |A )' | cut -c4- | tr '\n' ' ')
        echo "changed_modules=$changes" >> $GITHUB_OUTPUT
        
        # 获取每个 submodule 的更新信息
        change_details=""
        for module in $changes; do
          if [ -d "$module" ]; then
            cd "$module"
            latest_commit=$(git log -1 --pretty=format:"%h - %s (%an)")
            change_details="$change_details\n- **$module**: $latest_commit"
            cd ..
          fi
        done
        echo "change_details<<EOF" >> $GITHUB_OUTPUT
        echo -e "$change_details" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Commit and push changes
      if: steps.check_changes.outputs.changes == 'true'
      run: |
        git add .
        git commit -m "chore: update submodules to latest commits
        
        Updated modules: ${{ steps.get_changes.outputs.changed_modules }}
        
        Details:
        ${{ steps.get_changes.outputs.change_details }}
        
        Auto-updated by GitHub Actions"
        
        git push origin ${{ github.ref_name }}
    
    - name: Create summary
      if: steps.check_changes.outputs.changes == 'true'
      run: |
        echo "## 🔄 Submodules Updated" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "The following submodules have been updated to their latest commits:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "${{ steps.get_changes.outputs.change_details }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ Changes committed and pushed successfully!" >> $GITHUB_STEP_SUMMARY
    
    - name: No changes summary
      if: steps.check_changes.outputs.changes == 'false'
      run: |
        echo "## ✅ Submodules Up to Date" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "All submodules are already at their latest commits. No updates needed." >> $GITHUB_STEP_SUMMARY