name: Update Specific Submodules

on:
  workflow_dispatch:
    inputs:
      submodules:
        description: 'Select submodules to update (comma-separated)'
        required: true
        type: choice
        options:
          - 'all'
          - 'fe-mer,fe-cus'
          - 'ms-user,ms-order,ms-pay,ms-cmdt'
          - 'fe-mer'
          - 'fe-cus'
          - 'ms-user'
          - 'ms-order'
          - 'ms-pay'
          - 'ms-cmdt'
        default: 'all'
      
      create_pr:
        description: 'Create pull request instead of direct push'
        required: false
        type: boolean
        default: false

jobs:
  update-specific-submodules:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        submodules: recursive
        fetch-depth: 0
    
    - name: Setup Git
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
    
    - name: Parse submodules input
      id: parse_input
      run: |
        if [ "${{ github.event.inputs.submodules }}" = "all" ]; then
          modules="fe-mer fe-cus ms-user ms-order ms-pay ms-cmdt"
        else
          modules=$(echo "${{ github.event.inputs.submodules }}" | tr ',' ' ')
        fi
        echo "modules_to_update=$modules" >> $GITHUB_OUTPUT
        echo "Will update: $modules"
    
    - name: Update selected submodules
      run: |
        echo "Updating selected submodules..."
        modules="${{ steps.parse_input.outputs.modules_to_update }}"
        
        for module in $modules; do
          if [ -d "$module" ]; then
            echo "Updating $module..."
            cd "$module"
            git fetch origin
            git checkout $(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@')
            git pull origin $(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@')
            cd ..
          else
            echo "Warning: Module $module not found"
          fi
        done
    
    - name: Check for changes
      id: check_changes
      run: |
        if git diff --quiet; then
          echo "No changes detected"
          echo "changes=false" >> $GITHUB_OUTPUT
        else
          echo "Changes detected"
          echo "changes=true" >> $GITHUB_OUTPUT
        fi
    
    - name: Get change details
      if: steps.check_changes.outputs.changes == 'true'
      id: get_changes
      run: |
        changes=$(git status --porcelain | grep -E '^(M |A )' | cut -c4- | tr '\n' ' ')
        echo "changed_modules=$changes" >> $GITHUB_OUTPUT
        
        change_details=""
        for module in $changes; do
          if [ -d "$module" ]; then
            cd "$module"
            latest_commit=$(git log -1 --pretty=format:"%h - %s (%an, %ar)")
            change_details="$change_details\n- **$module**: $latest_commit"
            cd ..
          fi
        done
        echo "change_details<<EOF" >> $GITHUB_OUTPUT
        echo -e "$change_details" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create pull request branch
      if: steps.check_changes.outputs.changes == 'true' && github.event.inputs.create_pr == 'true'
      run: |
        branch_name="update-submodules-$(date +%Y%m%d-%H%M%S)"
        echo "branch_name=$branch_name" >> $GITHUB_ENV
        git checkout -b "$branch_name"
    
    - name: Commit changes
      if: steps.check_changes.outputs.changes == 'true'
      run: |
        git add .
        
        if [ "${{ github.event.inputs.submodules }}" = "all" ]; then
          commit_msg="chore: update all submodules to latest commits"
        else
          commit_msg="chore: update selected submodules (${{ github.event.inputs.submodules }}) to latest commits"
        fi
        
        git commit -m "$commit_msg
        
        Updated modules: ${{ steps.get_changes.outputs.changed_modules }}
        
        Details:
        ${{ steps.get_changes.outputs.change_details }}
        
        Manually triggered by: ${{ github.actor }}"
    
    - name: Push to main branch
      if: steps.check_changes.outputs.changes == 'true' && github.event.inputs.create_pr == 'false'
      run: |
        git push origin ${{ github.ref_name }}
    
    - name: Push PR branch and create pull request
      if: steps.check_changes.outputs.changes == 'true' && github.event.inputs.create_pr == 'true'
      run: |
        git push origin "$branch_name"
        
        # åˆ›å»º PR çš„ body
        pr_body="## ðŸ”„ Submodule Updates
        
        This PR updates the following submodules to their latest commits:
        
        ${{ steps.get_changes.outputs.change_details }}
        
        ### Changes
        - Updated modules: ${{ steps.get_changes.outputs.changed_modules }}
        - Triggered by: @${{ github.actor }}
        - Update scope: ${{ github.event.inputs.submodules }}
        
        ### Review Notes
        Please review the submodule updates and ensure all changes are expected.
        
        ---
        *This PR was automatically created by GitHub Actions*"
        
        # ä½¿ç”¨ GitHub CLI åˆ›å»º PR
        gh pr create \
          --title "chore: update submodules - ${{ github.event.inputs.submodules }}" \
          --body "$pr_body" \
          --base "${{ github.ref_name }}" \
          --head "$branch_name"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Create success summary
      if: steps.check_changes.outputs.changes == 'true'
      run: |
        echo "## ðŸ”„ Submodules Updated Successfully" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Updated scope:** ${{ github.event.inputs.submodules }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Changes:**" >> $GITHUB_STEP_SUMMARY
        echo "${{ steps.get_changes.outputs.change_details }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ github.event.inputs.create_pr }}" = "true" ]; then
          echo "âœ… Pull request created successfully!" >> $GITHUB_STEP_SUMMARY
        else
          echo "âœ… Changes pushed directly to ${{ github.ref_name }}!" >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: No changes summary
      if: steps.check_changes.outputs.changes == 'false'
      run: |
        echo "## âœ… No Updates Needed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "The selected submodules are already up to date:" >> $GITHUB_STEP_SUMMARY
        echo "- **Scope:** ${{ github.event.inputs.submodules }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status:** All modules are at their latest commits" >> $GITHUB_STEP_SUMMARY